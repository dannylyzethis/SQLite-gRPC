// proto/db_services.proto

syntax = "proto3";

package services;

// Database service
service DatabaseService {
  //for verification purposes
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc SayGoodbye (HelloRequest) returns (HelloReply) {}
  rpc AddNumbers (AddRequest) returns (AddReply) {}
  rpc GetStatus (StatusRequest) returns (StatusReply) {}
  rpc Echo (EchoRequest) returns (EchoReply) {}

  // Write operations
  rpc WriteValue(WriteValueRequest) returns (WriteValueResponse);
  rpc WriteRow(WriteRowRequest) returns (WriteRowResponse);
  rpc WriteMultipleValues(WriteMultipleValuesRequest) returns (WriteMultipleValuesResponse);

  // Read operations  
  rpc ReadValue(ReadValueRequest) returns (ReadValueResponse);
  rpc ReadRow(ReadRowRequest) returns (ReadRowResponse);
  rpc ReadTable(ReadTableRequest) returns (ReadTableResponse);
  rpc ReadQuery(ReadQueryRequest) returns (ReadQueryResponse);

  // Table management
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse);
  rpc DropTable(DropTableRequest) returns (DropTableResponse);
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse);
}


// Database service message types
message Value {
  oneof value_type {
    string text_value = 1;
    int64 int_value = 2;
    double float_value = 3;
    bool bool_value = 4;
    bytes blob_value = 5;
  }
}

message ColumnSpec {
  string name = 1;
  string data_type = 2; // TEXT, INTEGER, REAL, BLOB, BOOLEAN
  bool not_null = 3;
  bool primary_key = 4;
  bool unique = 5;
  string default_value = 6;
}

// Write operations
message WriteValueRequest {
  string table_name = 1;
  string id_column = 2;
  Value id_value = 3;
  string column_name = 4;
  Value column_value = 5;
  bool create_if_missing = 6; // Create row if ID doesn't exist
}

message WriteValueResponse {
  bool success = 1;
  string message = 2;
  int64 rows_affected = 3;
}

message WriteRowRequest {
  string table_name = 1;
  string id_column = 2;
  Value id_value = 3;
  map<string, Value> column_values = 4;
  bool create_if_missing = 5;
  bool upsert = 6; // Insert or update
}

message WriteRowResponse {
  bool success = 1;
  string message = 2;
  int64 rows_affected = 3;
  Value generated_id = 4; // If using auto-increment
}

message WriteMultipleValuesRequest {
  repeated WriteValueRequest writes = 1;
  bool atomic = 2; // All or nothing transaction
}

message WriteMultipleValuesResponse {
  bool success = 1;
  string message = 2;
  int64 total_rows_affected = 3;
  repeated string individual_results = 4;
}

// Read operations
message ReadValueRequest {
  string table_name = 1;
  string id_column = 2;
  Value id_value = 3;
  string column_name = 4;
}

message ReadValueResponse {
  bool found = 1;
  Value value = 2;
  string message = 3;
}

message ReadRowRequest {
  string table_name = 1;
  string id_column = 2;
  Value id_value = 3;
  repeated string columns = 4; // Empty means all columns
}

message ReadRowResponse {
  bool found = 1;
  map<string, Value> column_values = 2;
  string message = 3;
}

message ReadTableRequest {
  string table_name = 1;
  repeated string columns = 2; // Empty means all columns
  string where_clause = 3; // Optional WHERE condition
  string order_by = 4; // Optional ORDER BY
  int32 limit = 5; // Optional LIMIT
  int32 offset = 6; // Optional OFFSET
}

message Row {
  map<string, Value> column_values = 1;
}

message ReadTableResponse {
  bool success = 1;
  repeated Row rows = 2;
  int64 total_count = 3;
  string message = 4;
}

message ReadQueryRequest {
  string sql_query = 1;
  repeated Value parameters = 2; // For prepared statements
}

message ReadQueryResponse {
  bool success = 1;
  repeated Row rows = 2;
  repeated string column_names = 3;
  string message = 4;
}

// Table management
message CreateTableRequest {
  string table_name = 1;
  repeated ColumnSpec columns = 2;
  bool if_not_exists = 3;
}

message CreateTableResponse {
  bool success = 1;
  string message = 2;
}

message DropTableRequest {
  string table_name = 1;
  bool if_exists = 2;
}

message DropTableResponse {
  bool success = 1;
  string message = 2;
}

message ListTablesRequest {
}

message ListTablesResponse {
  repeated string table_names = 1;
  string message = 2;
}

// Greeter service message types
message HelloRequest {
  string name = 1;
}

message HelloReply {
  string message = 1;
}

message AddRequest {
  int32 a = 1;
  int32 b = 2;
}

message AddReply {
  int32 result = 1;
  string message = 2;
}

message StatusRequest {
}

message StatusReply {
  string status = 1;
  string uptime = 2;
  int32 request_count = 3;
}

message EchoRequest {
  string text = 1;
  bool uppercase = 2;
}

message EchoReply {
  string echoed_text = 1;
}
