# Cargo.toml

# Optimized for Rust 1.89.0 (latest versions as of late 2024/early 2025)

[package]
name = “grpc-sqlite-server”
version = “0.1.0”
edition = “2021”

[[bin]]
name = “server”
path = “src/main.rs”

[dependencies]
tokio = { version = “1.40”, features = [“macros”, “rt-multi-thread”] }
tonic = “0.12”
prost = “0.13”
sqlx = { version = “0.8”, features = [“runtime-tokio-rustls”, “sqlite”, “chrono”] }
serde = { version = “1.0”, features = [“derive”] }
serde_json = “1.0”
tracing = “0.1”
tracing-subscriber = “0.3”
anyhow = “1.0”
base64 = “0.22”

[build-dependencies]
tonic-build = “0.12”
prost-build = “0.13”

-----

# Alternative: Use latest compatible versions (let Cargo resolve)

# This approach lets Cargo pick the best versions

[package]
name = “grpc-sqlite-server”
version = “0.1.0”
edition = “2021”

[[bin]]
name = “server”
path = “src/main.rs”

[dependencies]
tokio = { version = “1”, features = [“macros”, “rt-multi-thread”] }
tonic = “0.12”
prost = “0.13”
sqlx = { version = “0.8”, features = [“runtime-tokio-rustls”, “sqlite”, “chrono”] }
serde = { version = “1”, features = [“derive”] }
serde_json = “1”
tracing = “0.1”
tracing-subscriber = “0.3”
anyhow = “1”
base64 = “0.22”

[build-dependencies]
tonic-build = “0.12”
prost-build = “0.13”

-----

# Check what versions Cargo would actually pick

# Run these commands to see what versions are available:

# Check current Rust version

rustc –version

# Should show: rustc 1.89.0

# See what versions Cargo would pick

cargo tree –depth 0

# Check for latest versions of key crates

cargo search tonic –limit 1
cargo search prost –limit 1
cargo search sqlx –limit 1

# See what versions are actually compatible

cargo update –dry-run

-----

# build.rs

# Updated for latest tonic-build

fn main() -> Result<(), Box<dyn std::error::Error>> {
// Check if proto file exists
if !std::path::Path::new(“proto/database.proto”).exists() {
panic!(“Proto file not found: proto/database.proto”);
}

```
// Use the latest tonic-build API
tonic_build::configure()
    .build_server(true)
    .build_client(true)
    .out_dir("src/generated") // Optional: specify output directory
    .compile_protos(&["proto/database.proto"], &["proto"])?;

println!("cargo:rerun-if-changed=proto/database.proto");

Ok(())
```

}
